/*struct VertexIn {
    position: float3;
}

struct FragmentIn {
    position: float4;
}

#[vertex]
fun pos(input: VertexIn): FragmentIn {
    var output: FragmentIn;
    output.position.x = input.position.x;
    output.position.y = input.position.y;
    output.position.z = 0.5;
    output.position.w = 1.0;
    return output;
}

#[fragment]
fun pixel(input: FragmentIn): float4 {
    var color: float4;
    color.r = 0.0;
    color.g = 1.0;
    color.b = 0.0;
    color.a = 1.0;

    var a: int = 3;
    a += 2;

    return color;
}

#[pipe]
struct Pipe {
    vertex = pos;
    fragment = pixel;
}

#[compute, threads(32, 1, 1)]
fun comp(): void {

}*/

// based on https://landelare.github.io/2023/02/18/dxr-tutorial.html

/*struct Payload {
    color: float3;
    allow_reflection: bool;
    missed: bool;
}

const scene: bvh;

#[write] const uav: tex2d;

const camera: float3 = float3(0, 1.5, -7);
const light: float3 = float3(0, 200, 0);
const skyTop: float3 = float3(0.24, 0.44, 0.72);
const skyBottom: float3 = float3(0.75, 0.86, 0.93);

fun sendrays(): void {
    var idx: uint2 = ray_index().xy;
    var size: float2 = ray_dimensions().xy;

    var uv: float2 = idx / size;
    var target: float3 = float3((uv.x * 2 - 1) * 1.8 * (size.x / size.y),
                           (1 - uv.y) * 4 - 2 + camera.y,
                           0);

    var primary: ray;
    primary.origin = camera;
    primary.direction = target - camera;
    primary.min = 0.001;
    primary.max = 1000;

    var payload: Payload;
    payload.allow_reflection = true;
    payload.missed = false;

    trace_ray(scene, primary, payload);

    uav[idx] = float4(payload.color.r, payload.color.g, payload.color.b, 1);
}

fun raymissed(payload: Payload): void {
    var slope: float = normalize(world_ray_direction()).y;
    var t: float = saturate(slope * 5 + 0.5);
    payload.color = lerp(skyBottom, skyTop, t);

    payload.missed = true;
}

fun closesthit(payload: Payload, uv: float2): void {
    payload.color = float3(1, 0, 1);
}

#[raypipe]
struct RayPipe {
    gen = sendrays;
    miss = raymissed;
    closest = closesthit;
}*/

struct VertexIn {
    position: float3;
}

struct FragmentIn {
    position: float4;
}

//fun amplify(): void {}

#[topology(triangle), threads(32, 1, 1)]
fun meshy(): void {
    
}

fun pixel(input: FragmentIn): float4 {
    var color: float4;
    color.r = 0.0;
    color.g = 1.0;
    color.b = 0.0;
    color.a = 1.0;

    var a: int = 3;
    a += 2;

    return color;
}

#[pipe]
struct Pipe {
    //prim = amplify;
    mesh = meshy;
    fragment = pixel;
}
